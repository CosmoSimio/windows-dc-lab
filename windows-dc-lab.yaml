Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: "Select the VPC where the instances will be launched"
  SecurityGroupId:
    Type: AWS::EC2::SecurityGroup::Id
    Description: "Select the security group for the instances"
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: "Select the key pair for the instances"
  DomainControllerName:
    Type: String
    Description: "Enter the name for the Domain Controller instance"
  CollectorServerName:
    Type: String
    Description: "Enter the name for the Collector server instance"
  DomainName:
    Type: String
    Description: "Enter the domain name for the domain controller and collector servers"
  DomainAdmin1:
    Type: String
    Description: "Enter the username for domain administrator user 1"
  DomainAdmin1Password:
    Type: String
    Description: "Enter the password for domain administrator user 1"
    NoEcho: true
  DomainAdmin2:
    Type: String
    Description: "Enter the username for domain administrator user 2"
  DomainAdmin2Password:
    Type: String
    Description: "Enter the password for domain administrator user 2"
    NoEcho: true
  DomainAdmin3:
    Type: String
    Description: "Enter the username for domain administrator user 3"
  DomainAdmin3Password:
    Type: String
    Description: "Enter the password for domain administrator user 3"
    NoEcho: true
  MSSQLInstanceName:
    Type: String
    Description: "Enter the name for the MSSQL instance"
  CollectorInstallCommand:
    Type: String
    Description: "Enter the command to install and configure the Collector software on the CollectorInstance"
    Default: ""
  AMIId:
    Type: AWS::EC2::Image::Id
    Description: "Select the Amazon Machine Image (AMI) for the instances"
    Default: "ami-0f10e27269e6e3b55"
  MSSQLPassword:
    Type: String
    Description: "Enter the password for the sa user in SQL Server"
    NoEcho: true
  InstanceType:
    Type: String
    Description: "Select the instance type for the instances"
    Default: "t3.micro"
    AllowedValues:
      - "t3.micro"
      - "t3.small"
      - "t3.medium"
      - "t3.large"
      - "t3.xlarge"
      - "t3.2xlarge"

Resources:
  DomainControllerInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !Ref AMIId
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !Ref SecurityGroupId
      UserData:
        Fn::Base64: !Sub |
          <powershell>
          # Install Active Directory Domain Services
          Install-WindowsFeature AD-Domain-Services -IncludeManagementTools

          # Configure static IP address
          $IP = (Get-NetAdapter | Where-Object {$_.Name -eq 'Ethernet'}).IPv4Address.IPAddress
          New-NetIPAddress -IPAddress $IP -InterfaceAlias 'Ethernet' -PrefixLength 24 -DefaultGateway '10.0.0.1'

          # Create new domain
          Install-ADDSForest -DomainName !Ref DomainName -DomainNetbiosName (Get-NetAdapter | Where-Object {$_.Name -eq 'Ethernet'}).IPv4Address.IPAddress.Split(".")[3] -DomainMode WinThreshold -ForestMode WinThreshold

          # Create domain administrator users
          New-ADUser -Name ${DomainAdmin1} -AccountPassword (ConvertTo-SecureString -AsPlainText -Force ${DomainAdmin1Password}) -Enabled $true -PasswordNeverExpires $true -CannotChangePassword $false -Path "CN=Users,DC=${DomainName}" -Credential (Get-Credential -UserName "${DomainName}/Administrator" -Message "Enter domain administrator credentials") -DisplayName ${DomainAdmin1}
          New-ADUser -Name ${DomainAdmin2} -AccountPassword (ConvertTo-SecureString -AsPlainText -Force ${DomainAdmin2Password}) -Enabled $true -PasswordNeverExpires $true -CannotChangePassword $false -Path "CN=Users,DC=${DomainName}" -Credential (Get-Credential -UserName "${DomainName}/Administrator" -Message "Enter domain administrator credentials") -DisplayName ${DomainAdmin2}
          New-ADUser -Name ${DomainAdmin3} -AccountPassword (ConvertTo-SecureString -AsPlainText -Force ${DomainAdmin3Password}) -Enabled $true -PasswordNeverExpires $true -CannotChangePassword $false -Path "CN=Users,DC=${DomainName}" -Credential (Get-Credential -UserName "${DomainName}/Administrator" -Message "Enter domain administrator credentials") -DisplayName ${DomainAdmin3}

          # Create DNS forwarders
          Set-DnsServerForwarder -IPAddress 8.8.8.8, 8.8.4.4

          # Restart computer
          Restart-Computer -Force
          </powershell>

  CollectorInstance:
      Type: AWS::EC2::Instance
      Properties:
        InstanceType: !Ref InstanceType
        ImageId: !Ref AMIId
        KeyName: !Ref KeyName
        SecurityGroupIds:
          - !Ref SecurityGroupId
        UserData:
          Fn::Base64: !Sub |
            <powershell>
            # Configure static IP address
            $IP = (Get-NetAdapter | Where-Object {$_.Name -eq 'Ethernet'}).IPv4Address.IPAddress
            New-NetIPAddress -IPAddress $IP -InterfaceAlias 'Ethernet' -PrefixLength 24 -DefaultGateway '10.0.0.1'

            # Join domain
            $domainCreds = (Get-Credential -UserName "${DomainName}\\Administrator" -Message "Enter domain administrator credentials")
            Add-Computer -DomainName ${DomainName} -Credential $domainCreds

            # Install and configure the Collector software
            ${CollectorInstallCommand}
            </powershell>

  MSSQLInstance:
      Type: AWS::EC2::Instance
      Properties:
        InstanceType: !Ref InstanceType
        ImageId: !Ref AMIId
        KeyName: !Ref KeyName
        SecurityGroupIds:
          - !Ref SecurityGroupId
        UserData:
          Fn::Base64: !Sub |
            <powershell>
            # Configure static IP address
            $IP = (Get-NetAdapter | Where-Object {$_.Name -eq 'Ethernet'}).IPv4Address.IPAddress
            New-NetIPAddress -IPAddress $IP -InterfaceAlias 'Ethernet' -PrefixLength 24 -DefaultGateway '10.0.0.1'

            # Join domain
            $domainCreds = (Get-Credential -UserName "${DomainName}\\Administrator" -Message "Enter domain administrator credentials")
            Add-Computer -DomainName ${DomainName} -Credential $domainCreds

            # Install SQL Server
            $saPassword = ConvertTo-SecureString -String "${MSSQLPassword}" -Force -AsPlainText
            $installArgs = @("/ConfigurationFile=`"${Env:ProgramFiles(x86)}\Microsoft SQL Server\150\Setup Bootstrap\Log\20190304_212849\ConfigurationFile.ini`"", "/SQLSVCPASSWORD=`"$saPassword`"")
            Start-Process -FilePath `"$($Env:SystemDrive)\SQL2019\setup.exe`" -ArgumentList $installArgs -Wait -NoNewWindow

            # Configure firewall
            New-NetFirewallRule -DisplayName "SQL Server" -Direction Inbound -Action Allow -Protocol TCP -LocalPort 1433

            # Restart computer
            Restart-Computer -Force
            </powershell>

Outputs:
  DomainControllerPublicIP:
    Value: !GetAtt DomainControllerInstance.PublicIp
  DomainControllerPrivateIP:
    Value: !GetAtt DomainControllerInstance.PrivateIp
  DomainControllerInstanceId:
    Value: !Ref DomainControllerInstance

  CollectorPublicIP:
    Value: !GetAtt CollectorInstance.PublicIp
    Description: The public IP address of the collector instance
  CollectorPrivateIP:
    Value: !GetAtt CollectorInstance.PrivateIp
    Description: The private IP address of the collector instance
  CollectorInstanceId:
    Value: !Ref CollectorInstance

  MSSQLPublicIP:
    Value: !GetAtt MSSQLInstance.PublicIp
    Description: The public IP address of the SQL Server instance
  MSSQLPrivateIP:
    Value: !GetAtt MSSQLInstance.PrivateIp
    Description: The private IP address of the SQL Server instance
  MSSQLInstanceId:
    Value: !Ref MSSQLInstance